import os
import logging
import requests
import datetime
import json
import feedparser
import random
import re
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from langdetect import detect

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_IDS = {int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i.strip().isdigit()}
PROXY_URL = os.getenv("PROXY_URL", "https://clandestino-proxy.onrender.com/v1/chat/completions")
VK_TOKEN = os.getenv("VK_TOKEN")
VK_GROUP_ID = os.getenv("VK_GROUP_ID")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

menu_keyboard = InlineKeyboardMarkup(row_width=2)
menu_keyboard.add(
    InlineKeyboardButton("üß© –ö–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="news"),
    InlineKeyboardButton("üí¨ –ú–∞–Ω–∏—Ñ–µ—Å—Ç", callback_data="quote"),
    InlineKeyboardButton("üì∏ –û–±—Ä–∞–∑", callback_data="aesthetic"),
    InlineKeyboardButton("üé≠ –°—Ü–µ–Ω–∞", callback_data="story"),
    InlineKeyboardButton("üìà –û—Ç–∫–ª–∏–∫", callback_data="stats")
)

RSS_FEEDS = [
    "https://www.harpersbazaar.com/rss/celebrity-news.xml",
    "https://www.vogue.com/feed/rss",
    "https://people.com/feed/",
    "https://www.elle.com/rss/all.xml",
    "https://www.glamour.ru/rss/all",
    "https://www.cosmo.ru/rss/all.xml",
    "https://esquire.ru/rss.xml",
    "https://snob.ru/feed/rss/",
    "https://style.rbc.ru/rss/full/"
]

BLOCKED_KEYWORDS = ["unsubscribe", "newsletter", "cookie", "advertising", "privacy"]
ALLOWED_KEYWORDS = [
    "–∑–≤–µ–∑–¥–∞", "—Å—Ç–∏–ª—å", "–º–æ–¥–∞", "–ª—É–∫", "–ø—Ä–µ–º–∏—è", "–∞–∫—Ç—Ä–∏—Å–∞", "–∞–∫—Ç—ë—Ä", "–∞—Ä—Ç–∏—Å—Ç", "—Ä–µ–∂–∏—Å—Å—ë—Ä",
    "–∏–Ω—Ç–µ—Ä–≤—å—é", "–∫–∏–Ω–æ–ø—Ä–µ–º—å–µ—Ä–∞", "–≥–ª–∞–º—É—Ä", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "–ø–æ–¥–∏—É–º", "–¥–∏–∑–∞–π–Ω–µ—Ä", "–ø–æ–∫–∞–∑", "–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä",
    "–±—Ä–µ–Ω–¥", "–∏–Ω–¥—É—Å—Ç—Ä–∏—è –º–æ–¥—ã", "–∂—É—Ä–Ω–∞–ª", "–æ–±—Ä–∞–∑"
]

user_cache = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id in OWNER_IDS:
        await message.answer("üìç –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞:", reply_markup=menu_keyboard)

@dp.callback_query_handler(lambda c: c.data in ["news", "quote", "aesthetic", "story", "stats"])
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    if action == "stats":
        await callback_query.message.edit_text("üìä –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.", reply_markup=menu_keyboard)
        return

    raw = fetch_random_entry()
    if not raw:
        await callback_query.message.edit_text("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.", reply_markup=menu_keyboard)
        return

    rewritten = generate_post(raw, category=action)
    if not rewritten:
        await callback_query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=menu_keyboard)
        return

    user_cache[callback_query.from_user.id] = rewritten
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
        InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ VK", callback_data="publish"),
        InlineKeyboardButton("üîÑ –•–æ—á—É –µ—â—ë", callback_data=action)
    )
    await callback_query.message.edit_text(f"–°–æ–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç:\n\n{rewritten}", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data in ["edit", "publish"])
async def handle_post_actions(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    cached = user_cache.get(uid)
    if not cached:
        await callback_query.message.edit_text("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    if callback_query.data == "edit":
        await callback_query.message.edit_text(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏—à–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ:\n\n{cached}")
    elif callback_query.data == "publish":
        response = publish_to_vk(cached)
        if "response" in response:
            await callback_query.message.edit_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ!")
        else:
            await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response}")

def fetch_random_entry():
    max_attempts = 20
    attempts = 0
    while attempts < max_attempts:
        feed_url = random.choice(RSS_FEEDS)
        feed = feedparser.parse(feed_url)
        entries = feed.entries
        if not entries:
            attempts += 1
            continue

        entry = random.choice(entries)
        title = entry.get("title", "")
        content = entry.get("summary") or entry.get("description") or title
        content = BeautifulSoup(content, "html.parser").get_text().strip()

        full_text = f"{title}. {content}"
        lower_text = full_text.lower()

        if not any(word in lower_text for word in ALLOWED_KEYWORDS):
            attempts += 1
            continue
        if len(full_text) < 150:
            attempts += 1
            continue
        if any(bad in lower_text for bad in BLOCKED_KEYWORDS):
            attempts += 1
            continue
        try:
            lang = detect(full_text)
            if lang not in ['ru', 'en']:
                attempts += 1
                continue
        except:
            attempts += 1
            continue

        return full_text.strip()
    return ""

def generate_post(prompt_text, category="news"):
    system_prompt = (
        "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ, –º–æ—â–Ω—ã–µ –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ ‚Äî –≤ –¥—É—Ö–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≥–ª—è–Ω—Ü–∞. "
        "–ü–∏—à–∏ —è—Ä–∫–æ, –¥–µ—Ä–∑–∫–æ, —Å –ø–∞—Ñ–æ—Å–æ–º, –Ω–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –Ω–æ–≤–æ—Å—Ç—å, –∞ –ø—Ä–µ–≤—Ä–∞—â–∞–π –µ—ë –≤ –º–∏–Ω–∏-—ç—Å—Å–µ, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ."
    )

    user_prompt_map = {
        "news": f"–ü—Ä–µ–≤—Ä–∞—Ç–∏ —ç—Ç–æ –≤ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç: –¥–æ–±–∞–≤—å —Å—Ç–∏–ª—å, –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Ä–æ–Ω–∏—á–Ω—É—é –ø–æ–¥–∞—á—É. –ö–∞–∫ –∫–æ–ª–æ–Ω–∫–∞ –≤ Esquire, –Ω–æ –¥–ª—è VK:\n{prompt_text}",
        "quote": f"–û—Ñ–æ—Ä–º–∏ —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–∞–∫ –¥–µ—Ä–∑–∫—É—é —Ü–∏—Ç–∞—Ç—É-–∑–∞—è–≤–ª–µ–Ω–∏–µ. –î–æ–±–∞–≤—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:\n{prompt_text}",
        "aesthetic": f"–°–¥–µ–ª–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –ø–æ—Å—Ç –≤ –¥—É—Ö–µ —ç—Å—Ç–µ—Ç–∏–∫–∏: –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏—è, –∫–∞–∫ —Å—Ç–∏–ª—å–Ω–∞—è –∑–∞—Ä–∏—Å–æ–≤–∫–∞:\n{prompt_text}",
        "story": f"–ù–∞–ø–∏—à–∏ —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –º–∏–Ω–∏-–Ω–æ–≤–µ–ª–ª—É: —Å –¥—Ä–∞–º–æ–π, –ø–∞—Ñ–æ—Å–æ–º, –¥–µ—Ä–∑–æ—Å—Ç—å—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º—ã—Å–ª—å—é:\n{prompt_text}"
    }

    headers = {"Content-Type": "application/json"}
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt_map.get(category, prompt_text)}
        ]
    }
    response = requests.post(PROXY_URL, headers=headers, data=json.dumps(payload))
    if response.ok:
        return response.json().get("choices", [{}])[0].get("message", {}).get("content")
    return None

def publish_to_vk(text):
    url = "https://api.vk.com/method/wall.post"
    params = {
        "access_token": VK_TOKEN,
        "owner_id": f"-{VK_GROUP_ID}",
        "message": text,
        "v": "5.199"
    }
    response = requests.post(url, params=params)
    return response.json()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)




