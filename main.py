import asyncio
import logging
import os
import random
import re
import feedparser
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InputMediaPhoto, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp

BOT_TOKEN = os.getenv("API_TOKEN")
VK_TOKEN = os.getenv("VK_TOKEN")
VK_GROUP_ID = os.getenv("VK_GROUP_ID")
OWNER_IDS = {321069928, 5677874594}
USED_ENTRIES = set()
router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    if message.from_user.id not in OWNER_IDS:
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="üéØ –≠—Å—Ç–µ—Ç–∏–∫–∞", callback_data="type:aesthetic")
    kb.button(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="type:news")
    kb.button(text="‚ú® –§–∞–∫—Ç –æ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏", callback_data="type:celebrity_fact")
    kb.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è –æ –∑–≤–µ–∑–¥–µ", callback_data="type:celebrity_story")
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π –ø–æ—Å—Ç —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å:", reply_markup=kb.as_markup())

@router.callback_query(lambda c: c.data and c.data.startswith("type:"))
async def generate_posts(callback: CallbackQuery):
    post_type = callback.data.split(":")[1]
    if post_type == "news":
        await send_news(callback.message)
    elif post_type == "aesthetic":
        await callback.message.answer("–ü–æ—Å—Ç—ã —Å —ç—Å—Ç–µ—Ç–∏–∫–æ–π –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ.")
    elif post_type == "celebrity_fact":
        await send_celebrity_fact(callback.message)
    elif post_type == "celebrity_story":
        await send_celebrity_story(callback.message)
    await callback.answer()

def clean_html(text):
    return re.sub(r'<[^>]*>', '', text).strip()

async def send_news(message: Message):
    urls = [
        "https://www.gq.ru/rss/all",
        "https://www.elle.ru/rss/",
        "https://www.interviewrussia.ru/rss",
        "https://vogue.ru/feed",
        "https://www.the-village.ru/rss",
        "https://daily.afisha.ru/rss/",
        "https://style.rbc.ru/rss/",
        "https://snob.ru/feed/"
    ]
    entries = []
    for url in urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if entry.id not in USED_ENTRIES and any(kw in entry.title.lower() for kw in ["–∑–≤–µ–∑–¥–∞", "–º–æ–¥–∞", "—Å—Ç–∏–ª—å", "–∫—Ä–∞—Å–æ—Ç–∞", "–ª—É–∫", "celebrity", "–ª—É–∫–∏"]):
                entries.append(entry)
    if not entries:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return
    random.shuffle(entries)
    latest = entries[0]
    USED_ENTRIES.add(latest.id)

    title = clean_html(latest.get("title", ""))
    summary = clean_html(latest.get("summary", ""))
    text = f"<b>{title}</b>\n\n{summary}\n\n#–Ω–æ–≤–æ—Å—Ç–∏ #–ª–∞–∫—à–µ—Ä–∏"

    images = []
    media_fields = ["media_content", "media_thumbnail"]
    for field in media_fields:
        if field in latest:
            for media in latest[field][:6]:
                if "url" in media:
                    images.append(media["url"])
    if not images and "links" in latest:
        for link_info in latest.links:
            if link_info.get("type", "").startswith("image/"):
                images.append(link_info["href"])
    images = images[:6]

    await message.answer("–ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    if images:
        media_group = [InputMediaPhoto(media=url) for url in images]
        media_group[0].caption = text
        media_group[0].parse_mode = ParseMode.HTML
        await message.answer_media_group(media_group)
    else:
        await message.answer(text, parse_mode=ParseMode.HTML)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post:confirm")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="post:cancel")
    await message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É?", reply_markup=kb.as_markup())

@router.callback_query(lambda c: c.data in ["post:confirm", "post:cancel"])
async def handle_post_confirmation(callback: CallbackQuery):
    if callback.data == "post:confirm":
        await post_to_vk(callback.message)
        await callback.message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
    else:
        await callback.message.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()

async def post_to_vk(message: Message):
    async with aiohttp.ClientSession() as session:
        async for msg in message.chat.history(limit=10):
            if msg.text and msg.text.startswith("<b>"):
                payload = {
                    "access_token": VK_TOKEN,
                    "v": "5.199",
                    "owner_id": f"-{VK_GROUP_ID}",
                    "message": re.sub(r'<[^>]*>', '', msg.text),
                }
                await session.post("https://api.vk.com/method/wall.post", data=payload)
                break

async def send_celebrity_fact(message: Message):
    facts = [
        {
            "text": "üß† –í —é–Ω–æ—Å—Ç–∏ –ö–∏–∞–Ω—É –†–∏–≤–∑ –º–µ—á—Ç–∞–ª —Å—Ç–∞—Ç—å —Ö–æ–∫–∫–µ–∏—Å—Ç–æ–º, –∞ –Ω–µ –∞–∫—Ç—ë—Ä–æ–º.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/7/79/Keanu_Reeves_2013.jpg"
        },
        {
            "text": "üíÑ –û–¥—Ä–∏ –•–µ–ø–±—ë—Ä–Ω –Ω–æ—Å–∏–ª–∞ –æ–¥–µ–∂–¥—É —Ç–æ–ª—å–∫–æ –æ—Ç Givenchy ‚Äî —Ç–∞–∫ —Ä–æ–¥–∏–ª–∞—Å—å –º–æ–¥–∞ –Ω–∞ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å–æ –∑–≤—ë–∑–¥–∞–º–∏.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/e/e8/Audrey_Hepburn_1956.jpg"
        },
        {
            "text": "üëë –†–∏–∞–Ω–Ω–∞ —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π –∂–µ–Ω—â–∏–Ω–æ–π-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–µ–π, –æ—Ç–∫—Ä—ã–≤—à–µ–π –º–æ–¥–Ω—ã–π –¥–æ–º Fenty –ø–æ–¥ –∫—Ä—ã–ª–æ–º LVMH.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/4/4a/Rihanna_2018.png"
        }
    ]
    fact = random.choice(facts)
    await message.answer_photo(photo=fact["image"], caption=fact["text"])

async def send_celebrity_story(message: Message):
    stories = [
        {
            "text": "üíã –ú–∞—Ä–ª–µ–Ω –î–∏—Ç—Ä–∏—Ö –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å –æ—Ç –≥–æ–ª–ª–∏–≤—É–¥—Å–∫–∏—Ö —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–æ–≤ –∏ –≤–≤–µ–ª–∞ –≤ –º–æ–¥—É –º—É–∂—Å–∫–∏–µ –∫–æ—Å—Ç—é–º—ã –Ω–∞ –∂–µ–Ω—â–∏–Ω–∞—Ö.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/4/41/Marlene_Dietrich_%281930%29.jpg"
        },
        {
            "text": "üì∏ –í–∏–≤—å–µ–Ω –í–µ—Å—Ç–≤—É–¥ ‚Äî –∫–æ—Ä–æ–ª–µ–≤–∞ –ø–∞–Ω–∫-—ç—Å—Ç–µ—Ç–∏–∫–∏, –¥–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å—Ç–∏–ª—å ‚Äî —ç—Ç–æ –≤—ã–∑–æ–≤, –∞ –Ω–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/9/93/Vivienne_Westwood_2008.jpg"
        },
        {
            "text": "üî• –ë–µ–π–æ–Ω—Å–µ –∫–æ–≥–¥–∞-—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –∫–∞—Å—Ç–∏–Ω–≥ –Ω–∞ —Ä–æ–ª—å –≤ Disney, –∞ —Ç–µ–ø–µ—Ä—å –¥–∏–∫—Ç—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –º–æ–¥—ã –∏ –ø–æ–ø-–∫—É–ª—å—Ç—É—Ä—ã.",
            "image": "https://upload.wikimedia.org/wikipedia/commons/1/10/Beyonce_2011.jpg"
        }
    ]
    story = random.choice(stories)
    await message.answer_photo(photo=story["image"], caption=story["text"])

async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

if __name__ == "__main__":
    asyncio.run(main())
