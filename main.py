import os
import logging
import requests
import datetime
import json
import feedparser
import random
import re
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from langdetect import detect

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_IDS = {int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i.strip().isdigit()}
PROXY_URL = os.getenv("PROXY_URL", "https://clandestino-proxy.onrender.com/v1/chat/completions")
VK_TOKEN = os.getenv("VK_TOKEN")
VK_GROUP_ID = os.getenv("VK_GROUP_ID")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

menu_keyboard = InlineKeyboardMarkup(row_width=2)
menu_keyboard.add(
    InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç—å", callback_data="news"),
    InlineKeyboardButton("üß† –¶–∏—Ç–∞—Ç–∞", callback_data="quote"),
    InlineKeyboardButton("üí´ –≠—Å—Ç–µ—Ç–∏–∫–∞", callback_data="aesthetic"),
    InlineKeyboardButton("üé¨ –ò—Å—Ç–æ—Ä–∏—è", callback_data="story"),
    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
)

RSS_FEEDS = [
    "https://www.harpersbazaar.com/rss/celebrity-news.xml",
    "https://www.vogue.com/feed/rss",
    "https://people.com/feed/",
    "https://www.elle.com/rss/all.xml"
]

def fetch_random_entry():
    max_attempts = 10
    attempts = 0
    while attempts < max_attempts:
        feed_url = random.choice(RSS_FEEDS)
        feed = feedparser.parse(feed_url)
        entries = feed.entries
        if not entries:
            attempts += 1
            continue
        entry = random.choice(entries)
        content = entry.get("summary") or entry.get("description") or entry.get("title")
        content = BeautifulSoup(content, "html.parser").get_text()
        content = content.strip()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É –∏ –¥–ª–∏–Ω–µ
        if len(content) < 200:
            attempts += 1
            continue
        try:
            lang = detect(content)
            if lang != 'ru' and lang != 'en':
                attempts += 1
                continue
        except:
            attempts += 1
            continue

        return content

    return ""

def generate_post(prompt_text, category="news"):
    system_prompt = "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –º–æ–¥–Ω—ã–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–∞–±–ª–∏–∫–∞ –ø—Ä–æ —Å—Ç–∏–ª—å, –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π."
    user_prompt_map = {
        "news": f"–°–¥–µ–ª–∞–π –∏–∑ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –¥–µ—Ä–∑–∫–∏–º —Å—Ç–∏–ª–µ–º, —Ö—ç—à—Ç–µ–≥–∞–º–∏, —Å 2‚Äì4 –∞–±–∑–∞—Ü–∞–º–∏:\n{prompt_text}",
        "quote": f"–û—Ñ–æ—Ä–º–∏ —ç—Ç–æ –∫–∞–∫ –ø–æ—Å—Ç —Å —Ü–∏—Ç–∞—Ç–æ–π –∑–≤–µ–∑–¥—ã, –¥–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –¥–µ—Ä–∑–∫–∏–π —Ç–æ–Ω:\n{prompt_text}",
        "aesthetic": f"–°–¥–µ–ª–∞–π —Å—Ç–∏–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ —ç—Å—Ç–µ—Ç–∏–∫–µ –≥–ª—è–Ω—Ü–∞ –∏ –º–æ–¥—ã, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π:\n{prompt_text}",
        "story": f"–°–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏, –ø–æ–¥–∞–Ω–Ω—É—é –∂–∏–≤–æ –∏ –∫—Ä–∞—Å–∏–≤–æ, –∫–∞–∫ –¥–ª—è –≥–ª—è–Ω—Ü–µ–≤–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞:\n{prompt_text}"
    }
    headers = {"Content-Type": "application/json"}
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt_map.get(category, prompt_text)}
        ]
    }
    response = requests.post(PROXY_URL, headers=headers, data=json.dumps(payload))
    if response.ok:
        return response.json().get("choices", [{}])[0].get("message", {}).get("content")
    return None

def publish_to_vk(text):
    url = "https://api.vk.com/method/wall.post"
    params = {
        "access_token": VK_TOKEN,
        "owner_id": f"-{VK_GROUP_ID}",
        "message": text,
        "v": "5.199"
    }
    response = requests.post(url, params=params)
    return response.json()




