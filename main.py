import os
import logging
import requests
import datetime
import json
import feedparser
import random
import re
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from langdetect import detect

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_IDS = {int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i.strip().isdigit()}
PROXY_URL = os.getenv("PROXY_URL", "https://clandestino-proxy.onrender.com/v1/chat/completions")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

menu_keyboard = InlineKeyboardMarkup(row_width=2)
menu_keyboard.add(
    InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"),
    InlineKeyboardButton("üé® –≠—Å—Ç–µ—Ç–∏–∫–∞", callback_data="aesthetics"),
    InlineKeyboardButton("‚ú® –¶–∏—Ç–∞—Ç–∞", callback_data="quote"),
    InlineKeyboardButton("üí¨ –ò—Å—Ç–æ—Ä–∏—è", callback_data="story"),
    InlineKeyboardButton("üì° –°–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="collect")
)

post_actions_keyboard = InlineKeyboardMarkup(row_width=2)
post_actions_keyboard.add(
    InlineKeyboardButton("üîÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="rewrite"),
    InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –í–ö", callback_data="post_vk")
)

def log_interaction(data):
    try:
        with open("stats.jsonl", "a", encoding="utf-8") as f:
            f.write(json.dumps(data, ensure_ascii=False) + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def is_foreign(text):
    try:
        return detect(text) != "ru"
    except:
        return False

def clean_html(raw_html):
    return BeautifulSoup(raw_html, "html.parser").get_text()

def sanitize_text(text):
    text = clean_html(text)
    text = re.sub(r"http\S+", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

BLOCKED_KEYWORDS = ["subscribe", "buy now", "lookbook", "collection", "sale", "shopping"]


def is_advertisement(text):
    text = text.lower()
    return any(keyword in text for keyword in BLOCKED_KEYWORDS)

def translate_and_adapt(text):
    if is_foreign(text):
        prompt = (
            "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –µ–≥–æ –ø–æ–¥ —Å—Ç–∏–ª—å –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞. "
            "–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ë–µ–∑ HTML. –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –ë–µ–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ñ—Ä–∞–∑. –ù–∞–ø–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å—Ç–∏–ª—å–Ω–æ, 1‚Äì4 –∞–±–∑–∞—Ü–∞. "
            "–§–æ–∫—É—Å –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π, –æ–±—Ä–∞–∑—ã, –∑–≤—ë–∑–¥ —à–æ—É-–±–∏–∑–Ω–µ—Å–∞. –£–¥–∞–ª–∏ –º—É—Å–æ—Ä."
            f"\n\n{text}"
        )
    else:
        prompt = (
            "–°–¥–µ–ª–∞–π —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞: –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–µ—Ä–∑–∫–æ, —ç—Å—Ç–µ—Ç–∏—á–Ω–æ, "
            "–æ—Ç 1 –¥–æ 4 –∞–±–∑–∞—Ü–µ–≤, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ç–∏–ª—å, –º–æ–¥—É, –≤–∏–∑—É–∞–ª—å–Ω–æ—Å—Ç—å, –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π –∏ –∏—Ö –æ–±—Ä–∞–∑—ã. "
            "–£–¥–∞–ª–∏ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –æ—Å—Ç–∞–≤—å —á–∏—Å—Ç—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç."
            f"\n\n{text}"
        )

    response = requests.post(
        PROXY_URL,
        headers={"Content-Type": "application/json"},
        json={
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}]
        }
    )
    if response.ok:
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    else:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {response.text}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ/–∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

@dp.message_handler(commands=["start", "menu"])
async def cmd_start(message: types.Message):
    if message.from_user.id in OWNER_IDS:
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=menu_keyboard)
    else:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.callback_query_handler(lambda c: c.data in ["news", "aesthetics", "quote", "story"])
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    prompt_map = {
        "news": "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞: –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–µ—Ä–∑–∫–æ, —Ü–µ–ø–ª—è—é—â–µ. –¢–µ–º–∞ ‚Äî –º–æ–¥–∞, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏, —Å—Ç–∏–ª—å, —à–æ—É-–±–∏–∑–Ω–µ—Å, –≤–µ—Å–Ω–∞ 2025.",
        "aesthetics": "–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –ø–æ—Å—Ç –≤ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ–º Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ. –¢–µ–º–∞ ‚Äî —Å—Ç–∏–ª—å, –º–æ–¥–∞, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–µ—Å–Ω—ã 2025.",
        "quote": "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ü–∏—Ç–∞—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ –æ —Å—Ç–∏–ª–µ, –≤–µ—Å–Ω–µ –∏ —Å–∞–º–æ–æ—â—É—â–µ–Ω–∏–∏. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø–∞—Ñ–æ—Å–∞.",
        "story": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –¥–µ–≤—É—à–∫–µ –∏–ª–∏ –∑–≤–µ–∑–¥–µ —à–æ—É-–±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–ª—é–±–∏–ª–∞—Å—å —ç—Ç–æ–π –≤–µ—Å–Ω–æ–π, –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞."
    }
    prompt = prompt_map[callback_query.data]
    response = requests.post(
        PROXY_URL,
        headers={"Content-Type": "application/json"},
        json={"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": prompt}]}
    )
    if response.ok:
        data = response.json()
        text = data["choices"][0]["message"]["content"]
        await bot.send_message(callback_query.from_user.id, text.strip())
        log_interaction({
            "user_id": callback_query.from_user.id,
            "username": callback_query.from_user.username,
            "action": callback_query.data,
            "timestamp": datetime.datetime.now().isoformat(),
            "response": text.strip()
        })
    else:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.")

last_collected_text = None
recent_titles = set()
used_entries = set()
RSS_FEEDS = [
    "https://www.glamour.ru/rss/news",
    "https://www.vogue.ru/rss.xml",
    "https://www.elle.ru/rss.xml",
    "https://www.kinopoisk.ru/media/news/rss.xml",
    "https://www.woman.ru/rss/",
    "https://7days.ru/rss/",
    "https://www.starhit.ru/rss/",
    "https://www.cosmo.ru/rss.xml",
    "https://life.ru/rss.xml",
    "https://www.vogue.com/feed",
    "https://www.harpersbazaar.com/rss/all.xml",
    "https://www.lofficielusa.com/rss",
    "https://www.wmagazine.com/rss",
    "https://people.com/feed",
    "https://www.etonline.com/rss",
    "https://www.nytimes.com/svc/collections/v1/publish/www.nytimes.com/section/style/rss.xml",
    "https://www.gq.com/feed/rss",
    "https://www.instyle.com/news/rss"
]

@dp.callback_query_handler(lambda c: c.data == "collect")
async def handle_collect(callback_query: types.CallbackQuery):
    global last_collected_text, recent_titles, used_entries
    await bot.answer_callback_query(callback_query.id)

    all_entries = []
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        all_entries.extend(feed.entries)

    all_entries = [e for e in all_entries if getattr(e, "title", "").strip() or getattr(e, "summary", "").strip()]
    all_entries = [e for e in all_entries if not is_advertisement(e.title + " " + getattr(e, "summary", ""))]
    all_entries = sorted(all_entries, key=lambda e: getattr(e, "published_parsed", datetime.datetime.min), reverse=True)
    logging.info(f"–°–æ–±—Ä–∞–Ω–æ {len(all_entries)} –∑–∞–ø–∏—Å–µ–π –∏–∑ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")

    fresh_news = [entry for entry in all_entries if entry.title not in recent_titles and entry.title not in used_entries]

    if not fresh_news:
        logging.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ.")
        fresh_news = all_entries[:20]

    if not fresh_news:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–∂–µ —Å—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.")
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    entry = random.choice(fresh_news)
    title = sanitize_text(entry.title)
    summary = sanitize_text(getattr(entry, "summary", ""))
    combined = f"{title}\n{summary}".strip()

    adapted_text = translate_and_adapt(combined)
    last_collected_text = combined
    recent_titles.add(title)
    used_entries.add(title)
    if len(recent_titles) > 200:
        recent_titles = set(list(recent_titles)[-100:])

    await bot.send_message(callback_query.from_user.id, f"–°–æ–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç:\n\n{adapted_text}", reply_markup=post_actions_keyboard)

@dp.callback_query_handler(lambda c: c.data == "rewrite")
async def handle_rewrite(callback_query: types.CallbackQuery):
    global last_collected_text
    await bot.answer_callback_query(callback_query.id)
    if last_collected_text:
        alt_version = translate_and_adapt(last_collected_text)
        await bot.send_message(callback_query.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:\n\n{alt_version}", reply_markup=post_actions_keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data == "post_vk")
async def handle_post_vk(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üõ† –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)


