import os
import logging
import requests
import datetime
import json
import feedparser
import random
import re
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from langdetect import detect

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_IDS = {int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i.strip().isdigit()}
PROXY_URL = os.getenv("PROXY_URL", "https://clandestino-proxy.onrender.com/v1/chat/completions")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

menu_keyboard = InlineKeyboardMarkup(row_width=2)
menu_keyboard.add(
    InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"),
    InlineKeyboardButton("üé® –≠—Å—Ç–µ—Ç–∏–∫–∞", callback_data="aesthetics"),
    InlineKeyboardButton("‚ú® –¶–∏—Ç–∞—Ç–∞", callback_data="quote"),
    InlineKeyboardButton("üí¨ –ò—Å—Ç–æ—Ä–∏—è", callback_data="story"),
)

post_actions_keyboard = InlineKeyboardMarkup(row_width=2)
post_actions_keyboard.add(
    InlineKeyboardButton("üîÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="rewrite"),
    InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –í–ö", callback_data="post_vk"),
    InlineKeyboardButton("üîÑ –•–æ—á—É –µ—â—ë", callback_data="next_post")
)

user_cache = {}

def log_interaction(data):
    try:
        with open("stats.jsonl", "a", encoding="utf-8") as f:
            f.write(json.dumps(data, ensure_ascii=False) + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def is_foreign(text):
    try:
        return detect(text) != "ru"
    except:
        return False

def clean_html(raw_html):
    return BeautifulSoup(raw_html, "html.parser").get_text()

def sanitize_text(text):
    text = clean_html(text)
    text = re.sub(r"http\S+", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

BLOCKED_KEYWORDS = [
    "subscribe", "buy now", "lookbook", "collection", "sale", "shopping",
    "gender equality", "diversity", "inclusion", "activism",
    "hydrating sticks", "skin care", "–∫–æ—Å–º–µ—Ç–∏–∫–∞", "—É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π"
]

BLOCKED_NAMES = [
    "TikTok", "OnlyFans", "local influencer", "—Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å", "–±—Ä–µ–Ω–¥"
]

def is_advertisement(text):
    text = text.lower()
    return any(keyword in text for keyword in BLOCKED_KEYWORDS) or any(name.lower() in text for name in BLOCKED_NAMES)

def translate_and_adapt(text):
    if is_foreign(text):
        prompt = (
            "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –µ–≥–æ –ø–æ–¥ —Å—Ç–∏–ª—å –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞. "
            "–¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ë–µ–∑ HTML. –ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. –ë–µ–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ñ—Ä–∞–∑. –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω. "
            "–ù–∞–ø–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ, —Å—Ç–∏–ª—å–Ω–æ, 1‚Äì4 –∞–±–∑–∞—Ü–∞. –£–¥–∞–ª–∏ –º—É—Å–æ—Ä. –§–æ–∫—É—Å ‚Äî —à–æ—É-–±–∏–∑–Ω–µ—Å, –º–æ–¥–∞, –∑–≤–µ–∑–¥—ã –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è."
            f"\n\n{text}"
        )
    else:
        prompt = (
            "–°–¥–µ–ª–∞–π —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞: –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–µ—Ä–∑–∫–æ, —ç—Å—Ç–µ—Ç–∏—á–Ω–æ, "
            "–æ—Ç 1 –¥–æ 4 –∞–±–∑–∞—Ü–µ–≤. –£–¥–∞–ª–∏ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã, HTML, —Ä–µ–∫–ª–∞–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–º–µ–Ω–∞. "
            "–§–æ–∫—É—Å ‚Äî –∑–≤–µ–∑–¥—ã, —Ç–µ–ª–µ–≤–µ–¥—É—â–∏–µ, –∞–∫—Ç–µ—Ä—ã, –ø–µ–≤—Ü—ã, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è."
            f"\n\n{text}"
        )

    response = requests.post(
        PROXY_URL,
        headers={"Content-Type": "application/json"},
        json={
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}]
        }
    )
    if response.ok:
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    else:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {response.text}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ/–∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."
