import os
import logging
import requests
import datetime
import json
import feedparser
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from langdetect import detect

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OWNER_IDS = {int(i) for i in os.getenv("OWNER_IDS", "").split(",") if i.strip().isdigit()}
PROXY_URL = os.getenv("PROXY_URL", "https://clandestino-proxy.onrender.com/v1/chat/completions")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

menu_keyboard = InlineKeyboardMarkup(row_width=2)
menu_keyboard.add(
    InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"),
    InlineKeyboardButton("üé® –≠—Å—Ç–µ—Ç–∏–∫–∞", callback_data="aesthetics"),
    InlineKeyboardButton("‚ú® –¶–∏—Ç–∞—Ç–∞", callback_data="quote"),
    InlineKeyboardButton("üí¨ –ò—Å—Ç–æ—Ä–∏—è", callback_data="story"),
    InlineKeyboardButton("üì° –°–æ–±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="collect")
)

post_actions_keyboard = InlineKeyboardMarkup(row_width=2)
post_actions_keyboard.add(
    InlineKeyboardButton("üîÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="rewrite"),
    InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –í–ö", callback_data="post_vk")
)

def log_interaction(data):
    try:
        with open("stats.jsonl", "a", encoding="utf-8") as f:
            f.write(json.dumps(data, ensure_ascii=False) + "\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def is_foreign(text):
    try:
        return detect(text) != "ru"
    except:
        return False

def translate_and_adapt(text):
    prompt = (
        "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –µ–≥–æ –ø–æ–¥ —Å—Ç–∏–ª—å –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞: "
        "–ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–µ—Ä–∑–∫–æ, —ç—Å—Ç–µ—Ç–∏—á–Ω–æ, –æ—Ç 1 –¥–æ 4 –∞–±–∑–∞—Ü–µ–≤, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å—Ç–∏–ª—å, –º–æ–¥—É, –≤–∏–∑—É–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        f"{text}"
    )
    response = requests.post(
        PROXY_URL,
        headers={"Content-Type": "application/json"},
        json={
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": prompt}]
        }
    )
    if response.ok:
        data = response.json()
        return data["choices"][0]["message"]["content"].strip()
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ/–∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

@dp.message_handler(commands=["start", "menu"])
async def cmd_start(message: types.Message):
    if message.from_user.id in OWNER_IDS:
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=menu_keyboard)
    else:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.callback_query_handler(lambda c: c.data in ["news", "aesthetics", "quote", "story"])
async def process_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    prompt_map = {
        "news": "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –º–æ–¥–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞: –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–µ—Ä–∑–∫–æ, —Ü–µ–ø–ª—è—é—â–µ. –¢–µ–º–∞ ‚Äî –º–æ–¥–∞, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏, –≤–µ—Å–Ω–∞ 2025.",
        "aesthetics": "–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –ø–æ—Å—Ç –≤ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ–º Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ. –¢–µ–º–∞ ‚Äî —Å—Ç–∏–ª—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–µ—Å–Ω—ã 2025.",
        "quote": "–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é —Ü–∏—Ç–∞—Ç—É –æ—Ç –∏–º–µ–Ω–∏ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–π –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ –æ —Å—Ç–∏–ª–µ, –≤–µ—Å–Ω–µ –∏ —Å–∞–º–æ–æ—â—É—â–µ–Ω–∏–∏. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ –ø–∞—Ñ–æ—Å–∞.",
        "story": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ 3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –¥–µ–≤—É—à–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –≤–ª—é–±–∏–ª–∞—Å—å —ç—Ç–æ–π –≤–µ—Å–Ω–æ–π, –≤ —Å—Ç–∏–ª–µ –¥–Ω–µ–≤–Ω–∏–∫–∞."
    }
    prompt = prompt_map[callback_query.data]
    response = requests.post(
        PROXY_URL,
        headers={"Content-Type": "application/json"},
        json={"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": prompt}]}
    )
    if response.ok:
        data = response.json()
        text = data["choices"][0]["message"]["content"]
        await bot.send_message(callback_query.from_user.id, text.strip())
        log_interaction({
            "user_id": callback_query.from_user.id,
            "username": callback_query.from_user.username,
            "action": callback_query.data,
            "timestamp": datetime.datetime.now().isoformat(),
            "response": text.strip()
        })
    else:
        await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT.")

last_collected_text = None
recent_titles = []
RSS_FEEDS = [
    "https://www.glamour.ru/rss/news",
    "https://www.vogue.ru/rss.xml"
]

@dp.callback_query_handler(lambda c: c.data == "collect")
async def handle_collect(callback_query: types.CallbackQuery):
    global last_collected_text, recent_titles
    await bot.answer_callback_query(callback_query.id)

    fresh_news = []
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if entry.title not in recent_titles:
                fresh_news.append(entry)

    if not fresh_news:
        for url in RSS_FEEDS:
            feed = feedparser.parse(url)
            fresh_news.extend(feed.entries)

    if not fresh_news:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    entry = random.choice(fresh_news)
    title = entry.title
    summary = getattr(entry, "summary", "")
    combined = f"{title}\n{summary}"

    adapted_text = translate_and_adapt(combined)
    last_collected_text = adapted_text
    recent_titles.append(title)
    if len(recent_titles) > 10:
        recent_titles = recent_titles[-10:]

    await bot.send_message(callback_query.from_user.id, f"–°–æ–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç:\n\n{adapted_text}", reply_markup=post_actions_keyboard)

@dp.callback_query_handler(lambda c: c.data == "rewrite")
async def handle_rewrite(callback_query: types.CallbackQuery):
    global last_collected_text
    await bot.answer_callback_query(callback_query.id)
    if last_collected_text:
        alt_version = translate_and_adapt(last_collected_text)
        await bot.send_message(callback_query.from_user.id, f"–í–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:\n\n{alt_version}", reply_markup=post_actions_keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data == "post_vk")
async def handle_post_vk(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üõ† –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

